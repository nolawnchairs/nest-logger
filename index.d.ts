// Generated by dts-bundle-generator v5.9.0

/// <reference types="node" />

import { ConsoleLogger, DynamicModule, LogLevel } from '@nestjs/common';

declare class LogWriterService {
	private readonly config;
	private readonly writeStream;
	constructor(config: LoggerConfig);
	/**
	 * Write to the logging file
	 *
	 * @param {string} value
	 * @memberof LogWriterService
	 */
	write(value: string): void;
}
export declare class LoggerConfig {
	readonly defaultContext: string;
	readonly file: LoggingProfile & FileOptions;
	readonly stdout: LoggingProfile;
	constructor(config: ILoggerConfig);
	private parseLevel;
}
export declare class LoggerModule {
	/**
	 * Setup logging for the application
	 *
	 * @static
	 * @param {ILoggerConfig} config
	 * @return {*}  {DynamicModule}
	 * @memberof LoggerModule
	 */
	static forRoot(config: ILoggerConfig): DynamicModule;
}
export declare class LoggerService extends ConsoleLogger {
	private readonly config;
	private readonly writer;
	/**
	 * Logger service. Logs LOGGING_LEVEL to stdout, but only logs error and warn
	 * log events to LOG_FILE
	 *
	 * @memberof LoggerService
	 */
	constructor(config: LoggerConfig, writer: LogWriterService);
	/**
	 * Log a VERBOSE level message
	 *
	 * @param {string} message the message to be logged
	 * @param {...any[]} args optional arguments. Each will print to its own line. If the last argument is a string, that string will replace the context.
	 * @memberof LoggerService
	 */
	verbose(message: string, ...args: any[]): void;
	/**
	 * Log a DEBUG level message
	 *
	 * @param {*} message the message to be logged
	 * @param {...any[]} args optional arguments. Each will print to its own line. If the last argument is a string, that string will replace the context.
	 * @memberof LoggerService
	 */
	debug(message: string, ...args: any[]): void;
	/**
	 * Log a INFO level message
	*
	* @param {*} message the message to be logged
	* @param {...any[]} args optional arguments. Each will print to its own line. If the last argument is a string, that string will replace the context.
	* @memberof LoggerService
	*/
	log(message: string, ...args: any[]): void;
	/**
	 * Log a WARN level message
	 *
	 * @param {string} message the message to be logged
	 * @param {...any[]} args optional arguments. Each will print to its own line. If the last argument is a string, that string will replace the context.
	 * @memberof LoggerService
	 */
	warn(message: string, ...args: any[]): void;
	/**
	 * Log an ERROR level message
	 *
	 * @param {*} message the message to be logged
	 * @param {string} [stack] optional stack trace
	 * @param {...any[]} args optional arguments. Each will print to its own line. If the last argument is a string, that string will replace the context.
	 * @memberof LoggerService
	 */
	error(message: string, stack?: string, ...args: any[]): void;
	/**
	 * Dumps a logging entry to disk
	 *
	 * @param {*} message
	 * @param {string} [stack]
	 * @memberof LoggerService
	 */
	private dump;
	/**
	 * Determine if console logging is enabled for a given level
	 *
	 * @private
	 * @param {LogLevel} level
	 * @return {*}  {boolean}
	 * @memberof LoggerService
	 */
	private isConsoleLoggingEnabled;
	/**
	 * Determine if file logging is enabled for a given level
	 *
	 * @private
	 * @param {LogLevel} level
	 * @return {*}  {boolean}
	 * @memberof LoggerService
	 */
	private isFileLoggingEnabled;
	/**
	 * Detect if a string is probably a stack trace
	 *
	 * @private
	 * @param {string} value the string to test
	 * @return {*}  {boolean}
	 * @memberof LoggerService
	 */
	private isStackLike;
}
export declare const NEST_LOGGER = "NEST_LOGGER";
/**
 * Decorator to inject a new instance of the LoggerService
 *
 * @export
 * @param {(string | Function)} contextOrClass - The context to use for the logger as a string or a class constructor, from which the name will be derived.
 */
export declare function Logger(contextOrClass: string | Function): (target: object, key: string | symbol, index?: number) => void;
export declare type FileOptions = {
	/**
	 * The full path to the log file.
	 *
	 * @type {string}
	 */
	filename: string;
	/**
	 * The file mode for the log file. Defaults to `644`.
	 *
	 * @type {number}
	 */
	mode?: number;
	/**
	 * The character encoding for the log file. Defaults to `utf8`.
	 *
	 * @type {BufferEncoding}
	 */
	encoding?: BufferEncoding;
};
export declare type LoggingProfile = {
	level: LogLevel[];
	enabled: boolean;
	eol: string;
};
export declare type ProfileOptions<TEnabled extends boolean> = {
	/**
	 * Whether or not to enable this logging profile. Default `true`.
	 *
	 * @type {boolean}
	 * @memberof ILoggingProfileOptions
	 */
	enabled?: TEnabled;
	/**
	 * The log levels to apply to the logger.
	 *
	 * Can be an array of NestJS log levels, as is normally
	 * provided to the native NestJS logger:
	 *
	 * ```ts
	 * ['verbose', 'debug', 'log', 'warn', 'error']
	 * ```
	 *
	 * Or a combined string shorthand:
	 *
	 * ```
	 * VDIWE (verbose, debug, info, warn, error)
	 * ```
	 * Note that the level for `log` is abbreviated as `I` and not `L`
	 *
	 * @type {(LogLevel[] | string)}
	 * @memberof ILoggingProfileOptions
	 */
	level?: TEnabled extends true ? LogLevel[] | string : undefined;
	/**
	 * The end-of-line character to use when writing logs. Defaluts to `\n`.
	 *
	 * @type {string}
	 * @memberof ILoggingProfileOptions
	 */
	eol?: string;
};
export interface ILoggerConfig {
	/**
	 * The default context for the logger, if none is provided via injection. If
	 * omitted, no context will be printed.
	 *
	 * @type {string}
	 * @memberof ILoggerConfig
	 */
	defaultContext?: string;
	profiles: {
		/**
		 * The configuration for the file logger
		 *
		 * @type {(ProfileOptions & FileOptions)}
		 */
		file: Partial<FileOptions> & ProfileOptions<boolean>;
		/**
		 * The configuration for the console logger
		 *
		 * @type {ProfileOptions}
		 */
		stdout: ProfileOptions<boolean>;
	};
}

export as namespace MyModuleName;

export {};
